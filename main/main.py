import sys
import os
from datetime import datetime, timedelta


script_dir = os.path.dirname(__file__)
parent_dir = os.path.abspath(os.path.join(script_dir, os.pardir))
sys.path.insert(0, parent_dir)

from dao.crime_analysis_service_impl import CrimeAnalysisServiceImpl
from entity.incident import Incident
from entity.status import Status
from entity.case import Case
from entity.report import Report
from entity.officer import Officer
from entity.victim import Victim
from entity.suspect import Suspect
from entity.law_enforcement_agency import LawEnforcementAgency


def get_int_input(prompt):
    while True:
        try:
            return int(input(prompt))
        except ValueError:
            print("Invalid input. Please enter a number.")

def get_date_input(prompt):
    while True:
        try:
            date_str = input(prompt + " (YYYY-MM-DD HH:MM:SS): ")
            return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        except ValueError:
            print("Invalid date format. Please use YYYY-MM-DD HH:MM:SS.")

def main():
    service = CrimeAnalysisServiceImpl()
    print("Crime Analysis Service Interactive Demo\n" + "="*50)


    print("\n--- DATABASE PREREQUISITES ---")
    print("Before creating incidents, ensure you have existing data in:")
    print("  - Victims table (for VictimID)")
    print("  - LawEnforcementAgencies table (for AgencyID)")
    print("  - Suspects table (if linking suspects)")
    print("  - Officers table (if linking reporting officers to reports)")
    print("="*50)


    while True:
        print("\nChoose an operation:")
        print("1. Create New Incident")
        print("2. Update Incident Status")
        print("3. Get Incidents in Date Range")
        print("4. Search Incidents by Type")
        print("5. Generate Incident Report")
        print("6. Create New Case")
        print("7. Get Case Details")
        print("8. Update Case Details")
        print("9. Get All Cases")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            print("\n--- Create New Incident ---")
            incident_type = input("Enter Incident Type (e.g., Robbery, Theft): ")
            incident_date = get_date_input("Enter Incident Date")
            location = input("Enter Location (WKT format, e.g., 'POINT (-74.0060 40.7128)'): ")
            description = input("Enter Description: ")
            status = input("Enter Status (e.g., Open, Under Investigation, Closed): ")
            victim_id = get_int_input("Enter Victim ID (must exist in DB): ")
            suspect_id_input = input("Enter Suspect ID (optional, leave blank if none): ")
            suspect_id = int(suspect_id_input) if suspect_id_input else None
            agency_id = get_int_input("Enter Agency ID (must exist in DB): ")

            new_incident = Incident(
                incident_id=0,
                incident_type=incident_type,
                incident_date=incident_date,
                location=location,
                description=description,
                status=status,
                victim_id=victim_id,
                suspect_id=suspect_id,
                agency_id=agency_id
            )
            if service.create_incident(new_incident):
                print(f"Incident '{description}' created successfully! (ID generated by database)")
            else:
                print(f"Failed to create incident '{description}'.")

        elif choice == '2':
            print("\n--- Update Incident Status ---")
            incident_id = get_int_input("Enter Incident ID to update: ")
            new_status_name = input("Enter New Status (e.g., Closed): ")
            new_status_obj = Status(status_name=new_status_name)
            try:
                if service.update_incident_status(new_status_obj, incident_id):
                    print(f"Incident {incident_id} status updated to '{new_status_name}'.")
                else:
                    print(f"Failed to update status for Incident {incident_id}.")
            except Exception as e:
                print(f"Error updating incident status: {e}")

        elif choice == '3':
            print("\n--- Get Incidents in Date Range ---")
            start_date = get_date_input("Enter Start Date")
            end_date = get_date_input("Enter End Date")
            incidents_in_range = service.get_incidents_in_date_range(start_date, end_date)
            if incidents_in_range:
                print(f"Found {len(incidents_in_range)} incidents between {start_date.strftime('%Y-%m-%d')} and {end_date.strftime('%Y-%m-%d')}:")
                for inc in incidents_in_range:
                    print(f"  ID: {inc.incident_id}, Type: {inc.incident_type}, Date: {inc.incident_date.strftime('%Y-%m-%d %H:%M')}, Status: {inc.status}, Location: {inc.location}")
            else:
                print("No incidents found in the specified date range.")

        elif choice == '4':
            print("\n--- Search Incidents by Type ---")
            search_type = input("Enter Incident Type to search for: ")
            found_incidents = service.search_incidents(search_type)
            if found_incidents:
                print(f"Found {len(found_incidents)} incidents of type '{search_type}':")
                for inc in found_incidents:
                    print(f"  ID: {inc.incident_id}, Type: {inc.incident_type}, Date: {inc.incident_date.strftime('%Y-%m-%d %H:%M')}, Location: {inc.location}")
            else:
                print(f"No incidents found of type '{search_type}'.")

        elif choice == '5':
            print("\n--- Generate Incident Report ---")
            incident_id_for_report = get_int_input("Enter Incident ID to generate report for: ")

            try:
                # Simulating fetching the incident by ID
                cursor = service.conn.cursor()
                cursor.execute(
                    """
                    SELECT IncidentID, IncidentType, IncidentDate, Location.ToString() AS Location,
                           Description, Status, VictimID, SuspectID, AgencyID
                    FROM Incidents WHERE IncidentID = ?
                    """, (incident_id_for_report,)
                )
                row = cursor.fetchone()
                if row:
                    incident_to_report = service._map_row_to_incident(row)
                    report = service.generate_incident_report(incident_to_report)
                    print(f"Generated report for Incident ID {incident_to_report.incident_id}:")
                    print(f"  Report Content: {report.content}")
                    print(f"  Report Date: {report.report_date.strftime('%Y-%m-%d %H:%M')}")
                else:
                    print(f"Incident ID {incident_id_for_report} not found for reporting.")
            except Exception as e:
                print(f"Error generating report: {e}")


        elif choice == '6':

            print("\n--- Create New Case ---")

            case_description = input("Enter Case Description: ")

            incident_ids_str = input(
                "Enter Incident IDs to associate (comma-separated, leave blank for none): ").strip()

            incident_ids = [int(id.strip()) for id in incident_ids_str.split(',') if id.strip().isdigit()]

            incidents_to_associate = []

            if incident_ids:

                print("Attempting to fetch incidents for association...")

                cursor = service.conn.cursor()

                for inc_id in incident_ids:

                    try:

                        cursor.execute(

                            """

                            SELECT IncidentID,
                                   IncidentType,
                                   IncidentDate,
                                   Location.ToString() AS Location,

                                   Description,
                                   Status,
                                   VictimID,
                                   SuspectID,
                                   AgencyID

                            FROM Incidents
                            WHERE IncidentID = ?

                            """, (inc_id,)

                        )

                        row = cursor.fetchone()

                        if row:

                            incidents_to_associate.append(service._map_row_to_incident(row))

                        else:

                            print(f"Warning: Incident ID {inc_id} not found, skipping association.")

                    except Exception as e:

                        print(f"Error fetching Incident ID {inc_id} for case: {e}")

            try:

                new_case = service.create_case(case_description, incidents_to_associate)

                if new_case:

                    print(f"Case '{new_case.description}' created successfully with Case ID: {new_case.case_id}")

                    if new_case.incidents:

                        print("Associated Incidents:")

                        for inc in new_case.incidents:
                            print(f"  - Incident ID: {inc.incident_id}, Type: {inc.incident_type}")

                else:

                    print("Failed to create case.")

            except Exception as e:

                print(f"Error creating case: {e}")


        elif choice == '7':
            print("\n--- Get Case Details ---")
            case_id = get_int_input("Enter Case ID to get details for: ")
            fetched_case = service.get_case_details(case_id)
            if fetched_case:
                print(f"Details for Case ID {fetched_case.case_id}:")
                print(f"  Description: {fetched_case.description}")
                if fetched_case.incidents:
                    print("  Associated Incidents:")
                    for inc in fetched_case.incidents:
                        print(f"    - ID: {inc.incident_id}, Type: {inc.incident_type}, Status: {inc.status}, Location: {inc.location}")
                else:
                    print("  No incidents associated with this case.")
            else:
                print(f"Case with ID {case_id} not found.")

        elif choice == '8':
            print("\n--- Update Case Details ---")
            case_id = get_int_input("Enter Case ID to update: ")
            new_description = input("Enter New Case Description: ")
            case_to_update = Case()
            case_to_update.case_id = case_id
            case_to_update.description = new_description
            if service.update_case_details(case_to_update):
                print(f"Case {case_id} description updated to: '{new_description}'")
            else:
                print(f"Failed to update details for Case {case_id}.")

        elif choice == '9':
            print("\n--- Get All Cases ---")
            all_cases = service.get_all_cases()
            if all_cases:
                print(f"Found {len(all_cases)} cases:")
                for case in all_cases:
                    print(f"  Case ID: {case.case_id}, Description: {case.description}")
                    if case.incidents:
                        print("    Associated Incidents:")
                        for inc in case.incidents:
                            print(f"      - ID: {inc.incident_id}, Type: {inc.incident_type}")
                    else:
                        print("    No incidents associated.")
            else:
                print("No cases found in the system.")


        elif choice == '0':
            print("Exiting application. Goodbye!")
            if hasattr(service.conn, 'close'):
                service.conn.close()
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()